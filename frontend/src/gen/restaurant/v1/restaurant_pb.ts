// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file restaurant/v1/restaurant.proto (package restaurant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message restaurant.v1.GetRestaurantsRequest
 */
export class GetRestaurantsRequest extends Message<GetRestaurantsRequest> {
  /**
   * @generated from field: repeated string cuisines = 1;
   */
  cuisines: string[] = [];

  /**
   * @generated from field: repeated string zipcodes = 2;
   */
  zipcodes: string[] = [];

  /**
   * @generated from field: string health_rating = 3;
   */
  healthRating = "";

  constructor(data?: PartialMessage<GetRestaurantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "restaurant.v1.GetRestaurantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cuisines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "zipcodes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "health_rating", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRestaurantsRequest {
    return new GetRestaurantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRestaurantsRequest {
    return new GetRestaurantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRestaurantsRequest {
    return new GetRestaurantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRestaurantsRequest | PlainMessage<GetRestaurantsRequest> | undefined, b: GetRestaurantsRequest | PlainMessage<GetRestaurantsRequest> | undefined): boolean {
    return proto3.util.equals(GetRestaurantsRequest, a, b);
  }
}

/**
 * @generated from message restaurant.v1.RestaurantInfo
 */
export class RestaurantInfo extends Message<RestaurantInfo> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string address = 3;
   */
  address = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: int32 user_rating = 5;
   */
  userRating = 0;

  /**
   * @generated from field: string health_rating = 6;
   */
  healthRating = "";

  /**
   * @generated from field: repeated string cuisines = 7;
   */
  cuisines: string[] = [];

  constructor(data?: PartialMessage<RestaurantInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "restaurant.v1.RestaurantInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "user_rating", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "health_rating", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "cuisines", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RestaurantInfo {
    return new RestaurantInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RestaurantInfo {
    return new RestaurantInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RestaurantInfo {
    return new RestaurantInfo().fromJsonString(jsonString, options);
  }

  static equals(a: RestaurantInfo | PlainMessage<RestaurantInfo> | undefined, b: RestaurantInfo | PlainMessage<RestaurantInfo> | undefined): boolean {
    return proto3.util.equals(RestaurantInfo, a, b);
  }
}

/**
 * @generated from message restaurant.v1.GetRestaurantsResponse
 */
export class GetRestaurantsResponse extends Message<GetRestaurantsResponse> {
  /**
   * @generated from field: repeated restaurant.v1.RestaurantInfo restaurants = 1;
   */
  restaurants: RestaurantInfo[] = [];

  constructor(data?: PartialMessage<GetRestaurantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "restaurant.v1.GetRestaurantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "restaurants", kind: "message", T: RestaurantInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRestaurantsResponse {
    return new GetRestaurantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRestaurantsResponse {
    return new GetRestaurantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRestaurantsResponse {
    return new GetRestaurantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRestaurantsResponse | PlainMessage<GetRestaurantsResponse> | undefined, b: GetRestaurantsResponse | PlainMessage<GetRestaurantsResponse> | undefined): boolean {
    return proto3.util.equals(GetRestaurantsResponse, a, b);
  }
}

