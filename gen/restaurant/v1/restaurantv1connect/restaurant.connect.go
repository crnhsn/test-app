// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: restaurant/v1/restaurant.proto

package restaurantv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	v1 "test-app/gen/restaurant/v1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RestaurantServiceName is the fully-qualified name of the RestaurantService service.
	RestaurantServiceName = "restaurant.v1.RestaurantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RestaurantServiceGetRestaurantsProcedure is the fully-qualified name of the RestaurantService's
	// GetRestaurants RPC.
	RestaurantServiceGetRestaurantsProcedure = "/restaurant.v1.RestaurantService/GetRestaurants"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	restaurantServiceServiceDescriptor              = v1.File_restaurant_v1_restaurant_proto.Services().ByName("RestaurantService")
	restaurantServiceGetRestaurantsMethodDescriptor = restaurantServiceServiceDescriptor.Methods().ByName("GetRestaurants")
)

// RestaurantServiceClient is a client for the restaurant.v1.RestaurantService service.
type RestaurantServiceClient interface {
	GetRestaurants(context.Context, *connect.Request[v1.GetRestaurantsRequest]) (*connect.Response[v1.GetRestaurantsResponse], error)
}

// NewRestaurantServiceClient constructs a client for the restaurant.v1.RestaurantService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRestaurantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RestaurantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &restaurantServiceClient{
		getRestaurants: connect.NewClient[v1.GetRestaurantsRequest, v1.GetRestaurantsResponse](
			httpClient,
			baseURL+RestaurantServiceGetRestaurantsProcedure,
			connect.WithSchema(restaurantServiceGetRestaurantsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// restaurantServiceClient implements RestaurantServiceClient.
type restaurantServiceClient struct {
	getRestaurants *connect.Client[v1.GetRestaurantsRequest, v1.GetRestaurantsResponse]
}

// GetRestaurants calls restaurant.v1.RestaurantService.GetRestaurants.
func (c *restaurantServiceClient) GetRestaurants(ctx context.Context, req *connect.Request[v1.GetRestaurantsRequest]) (*connect.Response[v1.GetRestaurantsResponse], error) {
	return c.getRestaurants.CallUnary(ctx, req)
}

// RestaurantServiceHandler is an implementation of the restaurant.v1.RestaurantService service.
type RestaurantServiceHandler interface {
	GetRestaurants(context.Context, *connect.Request[v1.GetRestaurantsRequest]) (*connect.Response[v1.GetRestaurantsResponse], error)
}

// NewRestaurantServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRestaurantServiceHandler(svc RestaurantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	restaurantServiceGetRestaurantsHandler := connect.NewUnaryHandler(
		RestaurantServiceGetRestaurantsProcedure,
		svc.GetRestaurants,
		connect.WithSchema(restaurantServiceGetRestaurantsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/restaurant.v1.RestaurantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RestaurantServiceGetRestaurantsProcedure:
			restaurantServiceGetRestaurantsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRestaurantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRestaurantServiceHandler struct{}

func (UnimplementedRestaurantServiceHandler) GetRestaurants(context.Context, *connect.Request[v1.GetRestaurantsRequest]) (*connect.Response[v1.GetRestaurantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("restaurant.v1.RestaurantService.GetRestaurants is not implemented"))
}
